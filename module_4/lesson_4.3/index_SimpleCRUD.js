/*Реализуйте базовый класс `Collection`, со следующей логикой:
​
* У объекта `Collection` должно быть поле `url` в котором хранится адрес для получения коллекции 
( к примеру `http://jsonplaceholder.typicode.com/todos`)
* У объекта `Collection` должен быть метод `list(callback)`, который осуществляет `GET` запрос на URL, 
указанный в поле `url` и принимает на вход `callback`. 
После завершения запроса необходимо вызвать `callback` с массивом экземпляров `Collection` вторым аргументом. 
Первым аргументом является ошибка, возникшая при загрузке
* `Collection` должен иметь конструктор, принимающий на вход один параметр - объект и копирующий все его поля в this
* У экземпляра `Collection` должен быть метод `save(cb)`, работающий по следующей логике:
  * если у экземпляра `Collection` нет id - то необходимо выполнить `POST` запрос на `url`. 
    Содержимое запроса - все поля текущего экземпляра `Collection`. 
    В ответе необходимо получить `id` и сохранить его в экземпляр `Collection`
  * если у экземпляра `Collection` есть `id` - то необходимо выполнить `PATCH` запрос на `${url}/${id}`. 
    В запрос необходимо включить только **измененные** поля экземпляра `Collection` с момента последнего вызова `save`
  * `cb` вызывается после того, как сохранение было успешно завершено. 
    Единственный параметр `cb` - ошибка, возникшая при сохранении или `null`
  * У объекта `Collection` должен быть метод `get(id, callback)`, который осуществляет `GET` запрос на URL, `${url}/${id}`. 
    После завершения запроса необходимо вызвать `callback` с экземпляром `Collection` первым аргументом. 
    Первым аргументом является ошибка, возникшая при загрузке
​
Реализовать следующую логику приложения:
​
* Реализовать класс `User` унаследованный от `Collection`. Класс `User` должен иметь методы `list` и `get` аналогичные `Collection`, но возвращающий экземпляры класса `User`
* Класс `User` должен иметь поле `url` `http://jsonplaceholder.typicode.com/users`
* При сохранении пользователя необходимо проверить следующие утверждения:
    * у пользователя выставлены поля `name`, `username` и `email`
    * у пользователя `email` является корректным адресом электронной почты
* Реализовать класс `User` унаследованный от `Collection`. Класс `User` должен иметь методы `list` и `get` аналогичные `Collection`, но возвращающий экземпляры класса `User`
* Класс `User` должен иметь поле `url` `http://jsonplaceholder.typicode.com/users`
* При сохранении пользователя необходимо проверить следующие утверждения:
    * у пользователя выставлены поля `name`, `username` и `email`
    * у пользователя `email` является корректным адресом электронной почты
* Реализовать класс `Album` унаследованный от `Collection`. Класс `Album` должен иметь методы `list` и `get` аналогичные `Collection`, но возвращающий экземпляры класса `Album`
* Класс `Album` должен иметь поле `url` `http://jsonplaceholder.typicode.com/albums`
* При сохранении альбома необходимо проверить следующие утверждения:
    * у альбомы выставлены поля `userId`, `title`
* Реализовать класс `Photo` унаслед��ванный от `Collection`. Класс `Photo` должен иметь методы `list` и `get` аналогичные `Collection`, но возвращающий экземпляры класса `Photo`
* Класс `Photo` должен иметь поле `url` `http://jsonplaceholder.typicode.com/photos`
* Экземпляры класса `User` должен иметь метод `getAlbums(cb)`, который возвращает массив `Album`, принадлежащих пользователю
* Экземпляры класса `Album` должен иметь метод `getPhotos(cb)`, который возвращает массив `Photo`, принадлежащих альбому
* Реализовать следующую логику на странице:
    * При загрузке отображается список имен пользователей
    * При клике по имени пользователя отображается список его альбомов
    * При клике по имени альбома отображается список фото в нем (используйте `thumbnailUrl`)
    * При клике по фото, оно открывается полноразмерно в новом окне
*/
 function Person(name){
 // constructor => xxx
 // prototype ? ??????? ????? ??????? sayHi
 }

 function Man(){
 // ??????? ?? ????? ???????????? ?? ?????? Person
 }

 function X(){
 // ? ?????? ?????
 // y ??? ????????? prototype
 }

 X.prototype = Person.prototype // ?????????? ??????????? ?? ??????

 // ?????? ? ?????? ????? ????????? ?

 new X();

 // ? ?????????? ??? ? ???????? prototype Man

//? ??????? Collection ?????? ???? ???? url ? ??????? ???????? ????? ???
// ????????? ????????? ( ? ??????? http://jsonplaceholder.typicode.com/todos)
function  Collection(obj){
    this.obj = obj;
}

Collection.url = "http://jsonplaceholder.typicode.com/todos";

//? ??????? Collection ?????? ???? ????? list(callback), ??????? ????????? ?? ???? callback ?
// ???????????? GET ?????? ?? URL, ????????? ? ???? url.
// ????? ?????????? ??????? ?????????? ??????? callback ? ???????? ???????????
// Collection ?????? ??????????. ?????? ?????????? ???????? ??????, ????????? ??? ????????
Collection.prototype.list = function(callback){

    var request = new XMLHttpRequest();
    request.open('GET', 'this.url');
    request.send();


    request.onreadystatechange = function() {
        if (request.readyState === request.DONE) {
            if (~~(request.status / 100) === 2) {
                var response = JSON.parse(request.responseText);
                var collection = response.map(function (obj) {
                    return new Collection(obj);
                });
                callback(null, collection);
            } else {
                callback(request.statusText);
            }

        }
    }
};